Pymongo

Please do these exercises in Pycharm using Pymongo

Basics

Exercise 1 - Find the height of Darth Vader, only return results for the name and the height.
Exercise 2 - Find all characters with yellow eyes, only return results for the names of the characters.
Exercise 3 - Find male characters. Limit your results to only show the first 3.
Exercise 4 -Find the names of all the humans whose homeworld is Alderaan.


Mongodb Advanced exercises

To be done in Mongosh (git bash or MongoDB Compass)

Exercise 1

Research aggregation in Mongodb. How does it work?

Write a query that finds the total (sum) of the height of all human characters in the db

Write a query that finds the max height per homeworld

Write a query that finds the mass and count per species. Filter out null values and sort by average mass (ascending order)

Exercise 2

Some aggregation doesn't require the .aggregate() method

Use .distinct() to find a list of all species names in the database

Use .count() or .countDocuments() to get a count of the amount of humans in the database

What does .estimatedDocumentCount({}) do?

Exercise 3

The starwars database uses embedded documents for things like spicies and homeworld. Another option would be to use references.

Find the ObjectID for Darth Vader in the collection. Copy the output to your clipboard.

Create a collection in starwars called "starships"

Add Darth Vader's Tie-Fighter to that collection. Importantly we need to reference him being the pilot. Code is below:

db.createCollection("starships")

db.starships.insertOne({
  name: "TIE Advanced x1",
  model: "Twin Ion Engine Advanced x1",
  manufacturer: "Sienar Fleet Systems",
  length: 9.2,
  max_atmosphering_speed: 1200,
  crew: 1,
  passengers: 0,
  pilot: ObjectId("5ea9890f98e05ffdb34de97e")
})

We can then use $lookup within an aggregate pipeline in order to add a field corresponding to the joined data:

db.starships.aggregate([
  { $lookup: {
    from: "characters",
    localField: "pilot",
    foreignField: "_id",
    as: "matched_pilot"
  } }
])

Now, add the Millenium Falcon to the starships collection. Look up the data or make it up. The pilot must take an array with multiple ObjectIDs though.

We could then use the same lookup as before - it works with ObjectIds in arrays too. But we'll get a huge amount of information back. To restrict it to certain fields, we could add a $project step to the pipeline, which projects certain data to the next step:

db.starships.aggregate([
  { $lookup: {
    from: "characters",
    localField: "pilot",
    foreignField: "_id",
    as: "matched_pilot"
  } },
  { $project: {name: 1, model: 1, "matched_pilot.name": 1}}
])

When first inserting documents that might have references, you can generate a new ObjectId and assign it to a variable var id = ObjectId(). That variable can then be set as the _id of the primary document and as the reference for the referencing document.


PYMONGO AGGREGATION

Exercise 1 - What is the avaerage height of female characters?

Exercise 2 - Which character is the tallest?

If you finish everything before COB please let Luke know.






